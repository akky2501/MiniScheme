(define (f x) (lambda () (set! x (+ 1 x)) x))
(define g (f 10))
(g)



(define (f x) ( (lambda () (lambda () (set! x (+ 1 x)) x) ) ) )
(define g (f 10))
(g)



(define (fact x) (if ()))





(+ 5000 (call/cc (lambda (cont) (* 2 (cont 5) 3))) 1000 2000)



(define f (lambda (x) (define y x) (set! y 10) y))

(define (f x y)
    (define (label x y) (begin (* x y)))
    (label (+ x x) (+ y y)))


(define (gen) ((lambda () )))



(define (fact-let n)
  (let loop((n1 n) (p n))       
    (if (= n1 1)                    
        p
        (let ((m (- n1 1)))
          (loop m (* p m))))))   



(define (f n) (if (= n 0) 0 (+ n (f (- n 1)))))
(define (g n acc) (if (= n 0) acc (g (- n 1) (+ acc n))))





(define bar1 (lambda (cont) (print "call bar1\n")))
(define bar2 (lambda (cont) (print "call bar2\n") (cont #f)))
(define bar3 (lambda (cont) (print "call bar3\n")))
(define test (lambda (cont) (bar1 cont) (bar2 cont) (bar3 cont)))


(define reverse-do
  (lambda (xs)
    (do ((ls xs (cdr ls)) (result '() result))
        ((null? ls) result)
      (set! result (cons (car ls) result)))))
(reverse-do '(a b c d e))

(do ((x 0 (+ x 1))) ((= x 10) x) (print x))



(define find-do
  (lambda (fn ls)
    (call/cc
      (lambda (k)
        (do ((xs ls (cdr xs)))
            ((null? xs) #f)
          (if (fn (car xs)) (k (car xs))))))))


(find-do (lambda (x) (eq? 'c x)) '(a b c d e))

(find-do (lambda (x) (eq? 'c x)) '(a b d e f))



(define fail
(lambda () (print "no solution")))
(define in-range
(lambda (a b)
(call/cc
(lambda (cont)
(enumerate a b cont)))))
(define enumerate
(lambda (a b cont)
(if (> a b)
(fail)
(let ((save fail))
(set! fail
(lambda ()
(set! fail save)
(enumerate (+ a 1) b cont)))
(cont a)))))

(let ((x (in-range 2 9))
(y (in-range 2 9))
(z (in-range 2 9)))
(if (= (* x x)
(+ (* y y) (* z z)))
(list x y z)
(fail)))


(do ((x 0 (+ x 1))) (#f x) (print x)) 



(define (let**-expander vars body)
(if (null? vars)
  (cons 'begin body)
  (list 'let (list (car vars)) (let**-expander (cdr vars) body))))

(define-macro (let** vars . body)
(let**-expander vars body))